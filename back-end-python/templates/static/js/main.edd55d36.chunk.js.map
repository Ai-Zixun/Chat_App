{"version":3,"sources":["API/API.js","SignupAlert/SignupAlert.js","Login/Login.js","CreateAccount/CreateAccount.js","CreateChatroom/CreateChatroom.js","Chatroom/Chatroom.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["SingupAlert","props","alert","errorMessage","Alert","className","key","variant","Login","useState","setAlert","username","setUsername","password","setPassword","buttonClickHandler","a","console","log","axios","get","API","params","user_name","data","exist","user_password","passwordResponse","success","id","user_id","setID","setPage","src","logo","alt","Form","Group","Control","onChange","event","target","value","type","placeholder","Button","onClick","CreateAccount","passwordReenter","setPasswordReenter","email","setEmail","usernameResponse","validator","matches","isEmail","createResponse","CreateChatroom","roomname","setErrorMessage","roomnameExist","roomnameResponse","createRoom","setRoom","createRoomResponse","chatroomId","chatroom_id","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","Footer","onHide","Chatroom","React","updateState","forceUpdate","useCallback","rooms","setRooms","messages","setMessages","createChatrooModalShow","setCreateChatroomModalShow","useEffect","then","response","room","roomClickHandler","modifiedRooms","index","i","length","splice","Container","Row","Col","xs","chatroom_name","result","push","slice","forEach","displayRoomList","ButtonToolbar","show","message","created_date","displayMessageList","InputGroup","FormControl","aria-label","aria-describedby","Append","App","page","getPageHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.edd55d36.chunk.js","sourcesContent":["const API_URL = 'http://127.0.0.1:5000';\n\nexport default {API_URL};","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nimport './SignupAlert.css';\n\nconst SingupAlert = props => {\n    if (props.alert === \"null\")\n        return null;\n\n    let errorMessage = \"\";\n    switch (props.alert) {\n        case \"user-exist\":\n            errorMessage = \"The username is taken!\";\n            break; \n        case \"user-not-exist\":\n            errorMessage = \"The user does not exist!\";\n            break; \n        case \"username-format\":\n            errorMessage = \"Username should be 1 to 10 characters of letter and number combination!\";\n            break; \n        case \"password-not-match\":\n            errorMessage = \"Please enter the same password again!\";\n            break; \n        case \"password-format\":\n            errorMessage = \"Password should be 5 to 15 characters of letter and number combination!\";\n            break; \n        case \"password-wrong\":\n            errorMessage = \"Incorrect Password!\";\n            break; \n        case \"email-format\":\n            errorMessage = \"Please enter the email with correct format!\";\n            break; \n        case \"syste-error\":\n            errorMessage = \"Sorry, We are trying to fix our server\";\n            break; \n    }\n\n    return (\n        <Alert className=\"Signup-Form-Alert\" key={0} variant={'danger'}>\n            {errorMessage}\n        </Alert>\n    );\n};\n\nexport default SingupAlert;","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport API from '../API/API';\nimport SingupAlert from '../SignupAlert/SignupAlert'\nimport logo from '../logo.svg';\nimport './Login.css';\n\nconst Login = (props) => {\n    const [alert, setAlert] = useState(\"null\");\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    const buttonClickHandler = async () => {\n        console.log(\"Clicked\");\n\n        let usernameResponse = await axios.get(API.API_URL + '/api/user_exist', { params: { user_name: username } });\n        if (! usernameResponse.data.exist) {\n            setAlert(\"user-not-exist\");\n        } \n        else {\n            let passwordResponse = await axios.get(API.API_URL + '/api/login', { params: { user_name: username, user_password: password } });\n            if (! passwordResponse.data.success) {\n                setAlert(\"password-wrong\");\n            }\n            else {\n                setAlert(\"null\");\n                let id = passwordResponse.data.user_id;\n                props.setID(id);\n                props.setPage(\"chatroom\");\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <Form className=\"Login-Form\">\n                    <SingupAlert alert={alert} />\n                    <Form.Group>\n                        <Form.Control className=\"Login-Form-Text\" onChange={(event) => setUsername(event.target.value)} type=\"text\" placeholder=\"Enter Username\" />\n                        <Form.Control className=\"Login-Form-Text\" onChange={(event) => setPassword(event.target.value)} type=\"password\" placeholder=\"Enter Password\" />\n                    </Form.Group>\n                    <Button onClick={buttonClickHandler} className=\"Login-Form-Button\" variant=\"outline-success\">\n                        Sign In\n                    </Button>\n                    <Button onClick={() => {props.setPage(\"createAccount\")}} className=\"Login-Form-Button\" variant=\"outline-success\">\n                        Create Account\n                    </Button>\n                </Form>\n            </header>\n        </div>\n    );\n};\n\nexport default Login;","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport API from '../API/API';\nimport validator from 'validator'; \nimport SingupAlert from '../SignupAlert/SignupAlert'\nimport logo from '../logo.svg';\nimport './CreateAccount.css';\n\nconst CreateAccount = props => {\n    const [alert, setAlert] = useState(\"null\");\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordReenter, setPasswordReenter] = useState('');\n    const [email, setEmail] = useState('');\n\n    const buttonClickHandler = async () => {\n        console.log(\"Clicked\");\n        \n        let usernameResponse = await axios.get(API.API_URL + '/api/user_exist', { params: { user_name: username } });\n        if (!validator.matches(username, /^[a-zA-Z0-9]{1,10}$/)) {\n            setAlert(\"username-format\"); \n        } \n        else if (usernameResponse.data.exist) {\n            setAlert(\"user-exist\");\n        } \n        else if (!validator.matches(password, /^[a-zA-Z0-9]{5,15}$/)) {\n            setAlert(\"password-format\"); \n        } \n        else if (passwordReenter !== password) {\n            setAlert(\"password-not-match\"); \n        } \n        else if (!validator.isEmail(email)) {\n            setAlert(\"email-format\"); \n        } \n        else {\n            let createResponse = await axios.get(API.API_URL + '/api/create_user', { params: { user_name: username, user_password: password  } });\n            if (! createResponse.data.success) {\n                setAlert(\"syste-error\");\n            }\n            else {\n                setAlert(\"null\");\n                let id = createResponse.data.user_id;\n                console.log(id);\n                props.setID(id);\n                props.setPage(\"chatroom\");\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <Form className=\"Signup-Form\">\n                    <SingupAlert alert={alert} />\n                    <Form.Group>\n                        <Form.Control className=\"Signup-Form-Text\" onChange={(event) => setUsername(event.target.value)} type=\"text\" placeholder=\"Enter Username\"/>\n                        <Form.Control className=\"Signup-Form-Text\" onChange={(event) => setPassword(event.target.value)} type=\"password\" placeholder=\"Enter Password\" />\n                        <Form.Control className=\"Signup-Form-Text\" onChange={(event) => setPasswordReenter(event.target.value)} type=\"password\" placeholder=\"Confirm Password\" />\n                        <Form.Control className=\"Signup-Form-Text\" onChange={(event) => setEmail(event.target.value)} type=\"email\" placeholder=\"Enter E-Mail\" />\n                    </Form.Group>\n                    <Button onClick={buttonClickHandler} className=\"Signup-Form-Button\" variant=\"outline-success\">\n                        Sign Up\n                    </Button>\n                    <p className=\"Text\">Have an account? <a id={\"Link\"} onClick={() => {props.setPage(\"login\")}}>Sign In</a></p>\n                </Form>\n            </header>\n        </div>\n    );\n};\n\nexport default CreateAccount;","import { Alert, Modal, Button, Form } from 'react-bootstrap';\nimport React, { useState } from 'react';\nimport validator from 'validator'; \nimport axios from 'axios';\nimport API from '../API/API';\n\nconst CreateChatroom = (props) => {\n\n    let roomname = \"\"; \n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const roomnameExist = async (roomname) => {\n        let roomnameResponse = await axios.get(API.API_URL + '/api/chatroom_roomname_exist', { params: { roomname: roomname } });\n        return roomnameResponse.data.exist;\n    }\n\n    const createRoom = async (setRoom) => {\n        if (!validator.matches(roomname, /^[a-zA-Z0-9]{1,10}$/)) {\n            setErrorMessage(\"Illegal Chatroom Name: Please use 1 to 10 characters of letter and number combination!\"); \n        } \n        else if (await roomnameExist(roomname)) {\n            setErrorMessage(\"Illegal Chatroom Name: The chatroom name has been taken!\"); \n        } \n        else {\n            let createRoomResponse = await axios.get(API.API_URL + '/api/chatroom_create', { params: { roomname: roomname } });\n            let chatroomId = createRoomResponse.data.chatroom_id; \n            console.log(chatroomId);\n            setRoom(chatroomId);\n            setErrorMessage(\"\"); \n        }\n    }\n\n    const createRoomAlert = () => {\n        if (errorMessage === \"\"){\n            return null;\n        }\n        else {\n            return (\n                <Alert variant=\"danger\">\n                    {errorMessage}\n                </Alert>\n            ); \n        }\n    }\n\n    return (\n        <Modal {...props} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Create New Chatroom\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Control type=\"text\" placeholder=\"Chatroom Name\" onChange={(event) => {roomname = event.target.value;}}/>\n                    </Form.Group>\n                    <Form.Group>\n                        {createRoomAlert()}\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={() => {createRoom(props.setRoom); props.onHide();}}>Create</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default CreateChatroom;","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Container, InputGroup, FormControl, Button, ButtonToolbar } from 'react-bootstrap';\nimport axios from 'axios';\nimport API from '../API/API';\nimport CreateChatroom from '../CreateChatroom/CreateChatroom';\nimport './Chatroom.css';\n\nconst Chatroom = props => {\n    // Something Must be wrong here, I shouldn't need to do this. \n    const [, updateState] = React.useState();\n    const forceUpdate = React.useCallback(() => updateState({}), []);\n    //////////////////////////////////////////////////////////////////\n\n\n    // ------ CHATROOM TAGS ------\n    const [rooms, setRooms] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [username, setUsername] = useState(\"\");\n    const [createChatrooModalShow, setCreateChatroomModalShow] = React.useState(false);\n\n    const loadUsername = () => {\n        axios.get(API.API_URL + '/api/user_by_id', { params: { user_id: props.id } }).then(response => {\n            setUsername(response.data.username);\n            console.log(username);\n        });\n    }\n\n    useEffect(async () => {\n        await loadUsername();\n        axios.get(API.API_URL + '/api/chatroom_list').then(response => {\n            let room = response.data[0];\n            setRooms(response.data);\n            axios.get(API.API_URL + '/api/chatroom_messages', { params: { chatroom_id: room.chatroom_id } }).then(response => {\n                setMessages(response.data);\n            });\n        });\n    }, []);\n\n    const roomClickHandler = (chatroom_id) => {\n        let modifiedRooms = rooms;\n        let index = -1;\n        for (let i = 0; i < modifiedRooms.length; i++) {\n            if (rooms[i].chatroom_id === chatroom_id) {\n                index = i;\n            }\n        }\n        modifiedRooms.splice(0, 0, modifiedRooms.splice(index, 1)[0]);\n        axios.get(API.API_URL + '/api/chatroom_messages', { params: { chatroom_id: modifiedRooms[0].chatroom_id } }).then(response => {\n            setMessages(response.data)\n        });\n        setRooms(modifiedRooms);\n        forceUpdate();\n    };\n\n    const displayRoomList = () => {\n        if (rooms.length >= 1) {\n            let result = [];\n            result.push(\n                <div>\n                    <p className=\"TagSelected\" onClick={() => roomClickHandler(rooms[0].chatroom_id)}>{rooms[0].chatroom_name}</p>\n                    <hr />\n                </div>\n            );\n            let nonCurrentRooms = rooms.slice(1, rooms.length);\n            nonCurrentRooms.forEach((room) => {\n                result.push(\n                    <div>\n                        <p className=\"Tag\" onClick={() => roomClickHandler(room.chatroom_id)}>{room.chatroom_name}</p>\n                        <hr />\n                    </div>\n                );\n            });\n            return result;\n        }\n    };\n\n    const chatroomTags = () => {\n        return (\n            <div className=\"ChatroomTag\">\n                <hr />\n                {displayRoomList()}\n            </div>\n        );\n    };\n\n    const getCurrentRoom = () => {\n        if (rooms.length === 0) {\n            return null;\n        }\n        else {\n            return rooms[0].chatroom_name;\n        }\n    }\n\n    // ------ CHATROOM BOX ------\n    const displayMessageList = () => {\n        let result = [];\n        messages.forEach((message) => {\n            if (message.user_name === username) {\n                result.push(\n                    <div className=\"FromUser\">\n                        <div>\n                            <span className=\"MessageUser\">{message.user_name}</span>\n                            <span className=\"MessageDate\">{message.created_date}</span>\n                        </div>\n                        <div>\n                            <span className=\"MessageTextUser\">{message.message}</span>\n                        </div>\n                    </div>\n                );\n            }\n            else {\n                result.push(\n                    <div>\n                        <div>\n                            <span className=\"MessageUser\">{message.user_name}</span>\n                            <span className=\"MessageDate\">{message.created_date}</span>\n                        </div>\n                        <div>\n                            <span className=\"MessageTextOther\">{message.message}</span>\n                        </div>\n                    </div>\n                );\n            }\n        });\n        return result;\n    }\n\n    // ------ RETURN ------\n    return (\n        <div className=\"Chatroom\">\n            <Container>\n                <Row className=\"Top\">\n                    <Col xs={4} className=\"TopLeft\">\n                        <p className=\"TopLeftText\">Chatrooms</p>\n                    </Col>\n                    <Col xs={2} className=\"TopRightEmpty\">\n                    </Col>\n                    <Col xs={4} className=\"TopRightLabel\">\n                        <p className=\"TopRightText\">{getCurrentRoom()}</p>\n                    </Col>\n                    <Col xs={2} className=\"TopRightRight\">\n                        <p className=\"TopRightSignedIn\">Signed in as: {username}</p>\n                        <Button className=\"TopRightButton\" variant=\"light\">Sign out</Button>\n                    </Col>\n                </Row>\n                <Row className=\"Bottom\">\n                    <Col xs={4} className=\"BottomLeft\">\n                        {chatroomTags()}\n                        <ButtonToolbar>\n                            <Button variant=\"outline-success\" onClick={() => setCreateChatroomModalShow(true)}>\n                                New Chatroom\n                            </Button>\n                            <CreateChatroom setRoom={roomClickHandler} show={createChatrooModalShow} onHide={() => setCreateChatroomModalShow(false)}/>\n                        </ButtonToolbar>\n                    </Col>\n                    <Col xs={8} className=\"BottomRight\">\n                        <div className=\"Textbox\" id=\"DisplayedMessage\">\n                            {displayMessageList()}\n                        </div>\n                        <div className=\"TextInput\">\n                            <InputGroup className=\"mb-3 Input\">\n                                <FormControl\n                                    className=\"Input\"\n                                    placeholder=\"Message\"\n                                    aria-label=\"Recipient's username\"\n                                    aria-describedby=\"basic-addon2\"\n                                />\n                                <InputGroup.Append>\n                                    <Button variant=\"outline-success\">Send</Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default Chatroom;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Login from './Login/Login'\nimport CreateAccount from './CreateAccount/CreateAccount'\nimport Chatroom from './Chatroom/Chatroom'\n\nfunction App() {\n    const [page, setPage] = useState(\"chatroom\");\n    const [id, setID] = useState(0);\n\n    const getPageHandler = () => {\n        switch (page) {\n            case \"login\":\n                return <Login setPage={setPage} setID={setID}/>;\n            case \"createAccount\":\n                return <CreateAccount setPage={setPage} setID={setID}/>;\n            case \"chatroom\":\n                return <Chatroom setPage={setPage} id={id} setID={setID}/>;\n            default:\n                return <Login setPage={setPage} setID={setID}/>;\n        }\n    }\n\n    return (\n        <div>\n            {getPageHandler()}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.86ea0319.svg\";"],"sourceRoot":""}